image: alpine:latest

#      - validate / lint 
#      - plan_examples
#      - approve
#      - auto-release

variables:
  PLAN: plan.tfplan
  PLAN_JSON: tfplan.json
  TF_ROOT: ${CI_PROJECT_DIR}
  TERRAFORM_VERSION: "0.14.3"
  TF_IN_AUTOMATION: "TRUE"

cache:
  paths:
    - tfplan.enc.zip

stages:
  - pre-checks
  - plan
  

precommit:
  stage: pre-checks
  image: python:buster
  before_script:
    - apt-get update
    - apt-get install -y shellcheck zip jq
    - TF_ZIP="terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
    - wget "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/${TF_ZIP}"
    - unzip ${TF_ZIP} && rm ${TF_ZIP}
    - mv terraform /usr/bin/terraform
    - pip3 install pre-commit
  script:
    - pre-commit run --all-files

security-check:
  stage: pre-checks
  image: python:alpine
  before_script:
    - pip3 install --upgrade pip && pip3 install --upgrade setuptools
  script:
    - pip3 install checkov
    - checkov -d .

terraform-plan:
  stage: plan
  before_script:
    - apk add zip jq git
    - TF_ZIP="terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
    - wget "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/${TF_ZIP}"
    - unzip ${TF_ZIP} && rm ${TF_ZIP}
    - mv terraform /usr/bin/terraform
    - echo ${GCP_CREDENTIALS} > key.json
    - export GOOGLE_APPLICATION_CREDENTIALS=key.json
  script:
    - terraform init -input=false
    - terraform plan -input=false
    - terraform show -json | jq -r '([.resource_changes[]?.change.actions?]|flatten)|{"create":(map(select(.=="create"))|length),"update":(map(select(.=="update"))|length),"delete":(map(select(.=="delete"))|length)}' > plan.json
  artifacts:
    name: TerraformPlan
    reports:
      terraform: plan.json
