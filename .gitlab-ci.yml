
image: alpine:latest

# Requires CI variables:
# CACHE_PASSWORD
# GCP_CREDENTIALS

variables:
  GITLAB_TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}
  PLAN: plan.tfplan
  PLAN_JSON: tfplan.json
  TF_ROOT: ${CI_PROJECT_DIR}
  TERRAFORM_VERSION: "0.14.3"
  TF_DOCS_VERSION: "v0.10.1"
  TF_IN_AUTOMATION: "TRUE"

cache:
  paths:
    - tfplan.enc.zip

stages:
  - pre-checks
  - plan
  - test
  - release

precommit:
  stage: pre-checks
  image: python:buster
  script:
    - apt-get update
    - apt-get install -y shellcheck
    - curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | bash
    - tfswitch ${TERRAFORM_VERSION}
    - TF_DOCS="terraform-docs-${TF_DOCS_VERSION}-linux-amd64"
    - curl -Lo ./terraform-docs https://github.com/terraform-docs/terraform-docs/releases/download/${TF_DOCS_VERSION}/${TF_DOCS}
    - chmod +x  ./terraform-docs
    - mv ./terraform-docs /usr/bin/terraform-docs 
    - pip3 install pre-commit
    - pre-commit run --all-files

security-check:
  stage: pre-checks
  image: python:alpine
  before_script:
    - pip3 install --upgrade pip && pip3 install --upgrade setuptools
  script:
    - pip3 install checkov
    - checkov -d .

terratest:
  stage: test
  image:
    name: "hashicorp/terraform:full"
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/go/bin:/usr/local/go/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  script:
    - go test ./test/vpc-network

    
terraform-plan:
  stage: plan
  before_script:
    - apk add zip jq
    - TF_ZIP="terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
    - wget "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/${TF_ZIP}"
    - unzip ${TF_ZIP} && rm ${TF_ZIP}
    - mv terraform /usr/bin/terraform
    - echo ${GCP_CREDENTIALS} > key.json
    - export GOOGLE_APPLICATION_CREDENTIALS=key.json
  script: 
    - terraform init -input=false
    - terraform plan -input=false -out tfplan
    - terraform show -json tfplan | jq -r '([.resource_changes[]?.change.actions?]|flatten)|{"create":(map(select(.=="create"))|length),"update":(map(select(.=="update"))|length),"delete":(map(select(.=="delete"))|length)}' > plan.json
  artifacts:
    name: TerraformPlan
    reports:
      terraform: plan.json

release:
  image: node:13
  stage: release
  script:
    - npm install @semantic-release/gitlab @semantic-release/exec
    - npx semantic-release
  only:
    refs:
    - master
